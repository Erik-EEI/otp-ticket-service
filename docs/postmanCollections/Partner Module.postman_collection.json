{
	"info": {
		"_postman_id": "d2907121-c1b8-4ebb-8c60-dff57a3a30ae",
		"name": "Partner Module",
		"description": "Contains request to test the partner module specificly.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33255309"
	},
	"item": [
		{
			"name": "Events",
			"item": [
				{
					"name": "Get all events",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the 'data' field\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Data field is an array and is not empty\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.data).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Array should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "partner-key",
								"type": "text"
							},
							{
								"key": "x-api-secret",
								"value": "partner-secret",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{Localhost}}/getEvents",
							"host": [
								"{{Localhost}}"
							],
							"path": [
								"getEvents"
							]
						},
						"description": "Test the getEvents endpoint.\n\nIt should return all of the events from the partner module with its detailed information."
					},
					"response": []
				},
				{
					"name": "Get a specific event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - data and success\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData).to.have.property('data');",
									"  pm.expect(responseData).to.have.property('success');",
									"});",
									"",
									"",
									"pm.test(\"Validate the eventId in the response is equal to the requested eventId\", function () {",
									"    const requestedEventId = pm.request.url.query.get(\"eventId\");",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.data.eventId).to.equal(parseInt(requestedEventId));",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'seats' array is present and contains at least one element\", function () {",
									"    const responseData = pm.response.json().data;",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.seats).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "partner-key",
								"type": "text"
							},
							{
								"key": "x-api-secret",
								"value": "partner-secret",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{Localhost}}/getEvent?eventId=1",
							"host": [
								"{{Localhost}}"
							],
							"path": [
								"getEvent"
							],
							"query": [
								{
									"key": "eventId",
									"value": "1"
								}
							]
						},
						"description": "Test the getEvent endpoint with an eventId param.\n\nIt should return all the seats for one specified event."
					},
					"response": []
				},
				{
					"name": "Get detailed specific event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - data and success\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData).to.have.property('data');",
									"  pm.expect(responseData).to.have.property('success');",
									"});",
									"",
									"",
									"pm.test(\"Validate the eventId in the response is equal to the requested eventId\", function () {",
									"    const requestedEventId = pm.request.url.query.get(\"eventId\");",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.data.eventId).to.equal(parseInt(requestedEventId));",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'seats' array is present and contains at least one element\", function () {",
									"    const responseData = pm.response.json().data;",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.seats).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "partner-key",
								"type": "text"
							},
							{
								"key": "x-api-secret",
								"value": "partner-secret",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{Localhost}}/getEvent?eventId=1&detailed=true",
							"host": [
								"{{Localhost}}"
							],
							"path": [
								"getEvent"
							],
							"query": [
								{
									"key": "eventId",
									"value": "1"
								},
								{
									"key": "detailed",
									"value": "true"
								}
							]
						},
						"description": "Test the getEvent endpoint with an eventId param.\n\nSet the detailed param to \"true\"\n\nIt should return a detailed event response with event data and seats."
					},
					"response": []
				}
			],
			"description": "Contains tests for the event controller."
		},
		{
			"name": "Exceptions",
			"item": [
				{
					"name": "Exception - No such event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {",
									"  pm.response.to.have.status(404);",
									"});",
									"",
									"",
									"pm.test(\"Verify that the response body contains the expected fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string', \"message should be a string\");",
									"    pm.expect(responseData.errorCode).to.exist.and.to.be.a('number', \"errorCode should be a number\");",
									"    pm.expect(responseData.success).to.exist.and.to.be.a('boolean', \"success should be a boolean\");",
									"});",
									"",
									"",
									"pm.test(\"Verify that the value of errorCode is 90001\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.errorCode).to.equal(90001);",
									"});",
									"",
									"",
									"pm.test(\"Verify that the value of success is false\", function () {",
									"  pm.expect(pm.response.json().success).to.be.false;",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "partner-key",
								"type": "text"
							},
							{
								"key": "x-api-secret",
								"value": "partner-secret",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{Localhost}}/getEvent?eventId=5",
							"host": [
								"{{Localhost}}"
							],
							"path": [
								"getEvent"
							],
							"query": [
								{
									"key": "eventId",
									"value": "5"
								}
							]
						},
						"description": "The purpose of this request is to test if the correct exception is returned when we requeire a non-existent event.\n\nErrorCode 90001 should be received."
					},
					"response": []
				},
				{
					"name": "Exception - No such reservation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {",
									"    pm.expect(pm.response.code).to.equal(404);",
									"});",
									"",
									"",
									"pm.test(\"Response has required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.message).to.exist;",
									"  pm.expect(responseData.errorCode).to.exist;",
									"  pm.expect(responseData.success).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Verify that the errorCode is equal to 90005\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.errorCode).to.equal(90005);",
									"});",
									"",
									"",
									"pm.test(\"Verify that the success field is set to false\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.success).to.be.false;",
									"});",
									"",
									"",
									"pm.test(\"Verify that the message field is not empty\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.message).to.exist.and.to.not.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "partner-key",
								"type": "text"
							},
							{
								"key": "x-api-secret",
								"value": "partner-secret",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{Localhost}}/reservation?reservationId=999",
							"host": [
								"{{Localhost}}"
							],
							"path": [
								"reservation"
							],
							"query": [
								{
									"key": "reservationId",
									"value": "999"
								}
							]
						},
						"description": "The purpose of this request is to test if the correct exception is returned when we try to get the details of a non-existent reservation\n\nErrorCode 90005 should be received."
					},
					"response": []
				},
				{
					"name": "Exception - No such Seat",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {",
									"  pm.response.to.have.status(404);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.message).to.exist.and.to.be.a('string');",
									"  pm.expect(responseData.errorCode).to.exist.and.to.be.a('number');",
									"  pm.expect(responseData.success).to.exist.and.to.be.a('boolean');",
									"});",
									"",
									"",
									"pm.test(\"Verify that the errorCode is equal to 90002\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.errorCode).to.equal(90002);",
									"});",
									"",
									"",
									"pm.test(\"Verify that the success field is false\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.success).to.be.false;",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "partner-key",
								"type": "text"
							},
							{
								"key": "x-api-secret",
								"value": "partner-secret",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"eventId\": 1,\r\n    \"seatId\": 99\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Localhost}}/reserve",
							"host": [
								"{{Localhost}}"
							],
							"path": [
								"reserve"
							],
							"query": [
								{
									"key": "eventId",
									"value": "1",
									"disabled": true
								},
								{
									"key": "seatId",
									"value": "20",
									"disabled": true
								}
							]
						},
						"description": "The purpose of this request is to test if the correct exception is returned when we requeire a non-existent seat during ticket reservation.\n\nErrorCode 90002 should be received."
					},
					"response": []
				},
				{
					"name": "Exception - Cannot reserve occupied seat",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 409\", function () {",
									"  pm.expect(pm.response.code).to.equal(409);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.errorCode).to.exist.and.to.be.a('number');",
									"    pm.expect(responseData.success).to.exist.and.to.be.a('boolean');",
									"});",
									"",
									"",
									"pm.test(\"Validate errorCode is equal to 90010\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.errorCode).to.equal(90010);",
									"});",
									"",
									"",
									"pm.test(\"Validate that the success field is set to false\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.success).to.be.false;",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "partner-key",
								"type": "text"
							},
							{
								"key": "x-api-secret",
								"value": "partner-secret",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"eventId\": 1,\r\n    \"seatId\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Localhost}}/reserve",
							"host": [
								"{{Localhost}}"
							],
							"path": [
								"reserve"
							],
							"query": [
								{
									"key": "eventId",
									"value": "1",
									"disabled": true
								},
								{
									"key": "seatId",
									"value": "1",
									"disabled": true
								}
							]
						},
						"description": "The purpose of this request is to test if the correct exception is returned when we try to make a reservation to an already occupied seat.\n\nErrorCode 90010 should be received."
					},
					"response": []
				}
			],
			"description": "Contains tests for the exceptions"
		},
		{
			"name": "Reservation",
			"item": [
				{
					"name": "Make a reservation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response content type is application/json\", function () {",
									"    pm.response.to.have.header('Content-Type', 'application/json');",
									"});",
									"",
									"pm.test(\"Response has a reservationId property\", function () {",
									"    pm.expect(pm.response.json()).to.have.property('reservationId');",
									"});",
									"",
									"pm.test(\"ReservationId is a number\", function () {",
									"    pm.expect(pm.response.json().reservationId).to.be.a('number');",
									"});",
									"",
									"pm.test(\"Response has a success property\", function () {",
									"    pm.expect(pm.response.json()).to.have.property('success');",
									"});",
									"",
									"pm.test(\"Success is a boolean\", function () {",
									"    pm.expect(pm.response.json().success).to.be.a('boolean');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "partner-key",
								"type": "text"
							},
							{
								"key": "x-api-secret",
								"value": "partner-secret",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"eventId\": 1,\r\n    \"seatId\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Localhost}}/reserve?eventId=1&seatId=2",
							"host": [
								"{{Localhost}}"
							],
							"path": [
								"reserve"
							],
							"query": [
								{
									"key": "eventId",
									"value": "1"
								},
								{
									"key": "seatId",
									"value": "2"
								}
							]
						},
						"description": "The purpose of this request is to test the reservation functionality of the API.\n\nOn success a reservation number should be received."
					},
					"response": []
				},
				{
					"name": "Get a specific reservation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with data and success properties\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object').that.has.all.keys('data', 'success');\r",
									"});\r",
									"\r",
									"pm.test(\"Data property contains id, eventId, seatId, and createdAt\", function () {\r",
									"    var data = pm.response.json().data;\r",
									"    pm.expect(data).to.be.an('object').that.has.all.keys('id', 'eventId', 'seatId', 'createdAt');\r",
									"    pm.expect(data.id).to.be.a('number');\r",
									"    pm.expect(data.eventId).to.be.a('number');\r",
									"    pm.expect(data.seatId).to.be.a('number');\r",
									"    pm.expect(data.createdAt).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Success property is a boolean\", function () {\r",
									"    pm.expect(pm.response.json().success).to.be.a('boolean');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "partner-key",
								"type": "text"
							},
							{
								"key": "x-api-secret",
								"value": "partner-secret",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{Localhost}}/reservation?reservationId=1",
							"host": [
								"{{Localhost}}"
							],
							"path": [
								"reservation"
							],
							"query": [
								{
									"key": "reservationId",
									"value": "1"
								}
							]
						},
						"description": "Test the reservation GET endpoint.\n\nIt should return the details of the specific reservation thats id is sent as a parameter."
					},
					"response": []
				},
				{
					"name": "Cancel a reservation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with data and success properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"    pm.expect(jsonData).to.have.property('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Response indicates that the reservation was cancelled\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.success).to.be.true;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-api-key",
								"value": "partner-key",
								"type": "text"
							},
							{
								"key": "x-api-secret",
								"value": "partner-secret",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{Localhost}}/reservation?reservationId=1",
							"host": [
								"{{Localhost}}"
							],
							"path": [
								"reservation"
							],
							"query": [
								{
									"key": "reservationId",
									"value": "1"
								}
							]
						},
						"description": "Test the reservation DELETE endpoint.\n\nIt should return a message, that the reservation was cancelled, then the seat can be reserved again."
					},
					"response": []
				}
			],
			"description": "Contains a sequence of operations to test making, reviewing and deleting a reservation. Please execute the tests in order, from top to bottom.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"variable": [
		{
			"key": "Localhost",
			"value": "http://127.0.0.1:8081"
		},
		{
			"key": "reservationId",
			"value": "1"
		}
	]
}